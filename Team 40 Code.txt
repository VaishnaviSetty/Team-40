
#include <msp430.h>
#include <stdio.h>
#include <inttypes.h>
#include <stdlib.h>


#define CMD         0
#define DATA        1

#define LCD_OUT     P1OUT                   //lcd data prot1(4,5,6,7) -> 4,5,6,7 respectivly
#define LCD_DIR     P1DIR
#define D4          BIT4
#define D5          BIT5
#define D6          BIT6
#define D7          BIT7
#define RS          BIT2                    //lcd control PORT2(2) -> RS
#define EN          BIT3                    //lcd control PORT2(3) -> EN
#define LED         BIT4


#define SW          BIT3                    // Switch -> P1.3(connect flow sensor to this pin)
#define SOL         BIT1                    // Red SOL -> P1.7




/**
 *@brief Delay function for producing delay in 0.1 ms increments
 *@param t milliseconds to be delayed
 *@return void
 **/
void delay(uint16_t t)
{
    uint16_t i;
    for(i=t; i > 0; i--)
        __delay_cycles(100);
}

void delay_sec(unsigned int limit)
{
	volatile unsigned int x,y;
	for(x=0;x<limit;x++)
	for(y=0;y<=4;y++)
	__delay_cycles(40000);
}
/**
 *@brief Function to pulse EN pin after data is written
 *@return void
 **/
void pulseEN(void)
{
    P2OUT |= EN;                              // Giving a falling edge at EN pin
    delay(1);
    P2OUT &= ~EN;
    delay(1);
}

/**
 *@brief Function to write data/command to LCD
 *@param value Value to be written to LED
 *@param mode Mode -> Command or Data
 *@return void
 **/
void lcd_write(uint8_t value, uint8_t mode)
{
    if(mode == CMD)
        P2OUT &= ~RS;             // Set RS -> LOW for Command mode
    else
        P2OUT |= RS;              // Set RS -> HIGH for Data mode

    LCD_OUT = ((LCD_OUT & 0x0F) | (value & 0xF0));              // Write high nibble first
    pulseEN();
    delay(1);

    LCD_OUT = ((LCD_OUT & 0x0F) | ((value << 4) & 0xF0));       // Write low nibble next
    pulseEN();
    delay(1);
}

/**
 *@brief Function to print a string on LCD
 *@param *s pointer to the character to be written.
 *@return void
 **/
void lcd_print(char *s)
{
    while(*s)
    {
        lcd_write(*s, DATA);
        s++;
    }
}


/**
 *@brief Function to change numeric value into it's corresponding char array
 *@param num Number which has to be displayed
 *@return void
 **/
void lcd_printNumber(unsigned int num)
{
    char buf[3];                        // Creating a array of size 3
    char *str = &buf[2];                // Initializing pointer to end of the array

    *str = '\0';                        // storing null pointer at end of string

    do
    {
        unsigned long m = num;          // Storing number in variable m
        num /= 10;                      // Dividing number by 10
        char c = (m - 10 * num) + '0';  // Finding least place value and adding it to get character value of digit
        *--str = c;                     // Decrementing pointer value and storing character at that character
    } while(num);

    lcd_print(str);
}


/**
 *@brief Function to move cursor to desired position on LCD
 *@param row Row Cursor of the LCD
 *@param col Column Cursor of the LCD
 *@return void
 **/
void lcd_setCursor(uint8_t row, uint8_t col)
{
    const uint8_t row_offsets[] = { 0x00, 0x40};
    lcd_write(0x80 | (col + row_offsets[row]), CMD);
    delay(1);
}

/**
 *@brief Initialize LCD
 **/

void lcd_init()
{
	LCD_DIR |= (D4+D5+D6+D7);
	LCD_OUT &= ~(D4+D5+D6+D7);
	P2DIR |= (RS + EN);
	P2OUT = 0x00;

	delay(150);                     // Wait for power up ( 15ms )
	lcd_write(0x33, CMD);           // Initialization Sequence 1
	delay(50);                      // Wait ( 4.1 ms )
	lcd_write(0x32, CMD);           // Initialization Sequence 2
	delay(1);                       // Wait ( 100 us )

	// All subsequent commands take 40 us to execute, except clear & cursor return (1.64 ms)

	lcd_write(0x28, CMD);           // 4 bit mode, 2 line
	delay(1);

	lcd_write(0x0C, CMD);           // Display ON, Cursor OFF, Blink OFF
	delay(1);

	lcd_write(0x01, CMD);           // Clear screen
	delay(20);

	lcd_write(0x06, CMD);           // Auto Increment Cursor
	delay(1);

	lcd_setCursor(0,0);             // Goto Row 1 Column 1
}


//Global Variables..
volatile unsigned int pulse_count=15;



/*@brief entry point for the code*/
void main(void) {
	WDTCTL = WDTPW | WDTHOLD;           //! Stop Watchdog (Not recommended for code in production and devices working in field)


	P1DIR &= ~SW;                       // Set SW pin -> Input
	P1REN |= SW;                        // Enable Resistor for SW pin
	P1OUT |= SW;                        // Select Pull Up for SW pin

	P1IES &= ~SW;                       // Select Interrupt on Falling Edge
	P1IE |= SW;                         // Enable Interrupt on SW pin

	P2DIR |= (SOL + LED);                // Set SOL pin -> Output
	P2OUT |= (LED + SOL);

	lcd_init();                     // Initialising LCD
	__bis_SR_register(GIE);             // Enable CPU Interrupt

	lcd_setCursor(0,1);             // Cursor position (0,1)
	lcd_print("Hello Embedded");    // Print

	lcd_setCursor(1,5);             // Cursor position (1,3)
	lcd_print("Systems!");          // Print

	delay_sec(2);
	delay(50000);
	lcd_setCursor(0,0);             // Cursor position (0,1)
	lcd_print("               ");           // Print

	lcd_setCursor(1,0);             // Cursor position (1,3)
	lcd_print("                 ");    // Print
	lcd_setCursor(0,0);             // Cursor position (0,1)
	lcd_print("Remaining:");           // Print

	lcd_setCursor(1,0);             // Cursor position (1,3)
	lcd_print("SOl State:");    // Print

	P2OUT |= LED;
	while(1)
	{

		lcd_setCursor(0,12);
		lcd_printNumber(pulse_count);

		//lcd_setCursor(0,9);             // Cursor position (0,9)
		//lcd_print("   ");                  //

		//delay(50000);
		while(pulse_count>1)
		{
			lcd_setCursor(1,11);             //Cursor position (1,9)
			lcd_print(" ON    ");                  //
			delay_sec(1);
			P2OUT |= ((1 << SOL)+LED);

		}
		delay_sec(1);
		lcd_setCursor(0,12);
		lcd_print("   ");                  //
		lcd_setCursor(1,11);             // Cursor position (0,9)
		//P2OUT |= (1 << SOL);
		lcd_print(" OFF");                  //
		while(pulse_count == 0){
			delay_sec(1);
			P2OUT &= ~((1 << SOL)+LED);
			lcd_setCursor(0,12);
			lcd_print("NONE  ");                  //
			__disable_interrupt();
		}
	}
}

/*@brief entry point for switch interrupt*/
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
	if(P1IFG & SW)                      // If SW is Pressed
	{
		__delay_cycles(1000);
		//P1OUT ^= (1<<7);
		pulse_count--;
		lcd_setCursor(0,12);             //Cursor position (1,9)
		lcd_printNumber(pulse_count);
		P1IFG &= ~SW;                   // Clear SW interrupt flag
	}
}
